Инструкция по базовой интеграции сервера мобильных приложений с биллингом провайдера.
Для выполнения данной работы необходим базовый уровень знания языка Python.

В файле  smartyard_bill.py  находятся ряд функций, которые для первичной проверки работоспособности сервера имеют фейковые данные. 

Для начала интеграции необходимо реализовать основную функцию uidFrom(phone). Эта функция на вход принимает номер телефона клиента int 891009999999, на выходе должна выдавать массив уникальных числовых идентификаторов, далее именуемых UID договоров клиента, в которых есть этот номер телефона (или пустой массив):

def uidFrom(phone):
    uid = [10,101]
    return uid

Следующей базовой функцией является camsActiv(uid), на входе которой uid, на выходе которой объект из двух ключей и их значений в формате Bool: 'cams_open' — назначена ли в договоре услуга домофоны+видеонаблюдение и 'cams_paid' и оплачена ли она.

def camsActiv(uid):
    row = {'cams_open': True, 'cams_paid': True}
    return row


Внимание!!! Эти две функции являются базовыми и часто используются в различных местах. В связи с этим настоятельно рекомендуется их реализовывать путем прямых sql запросов в базу данных биллинга. Для этого необходимо предоставить доступ только на чтение и сформировать sql запрос, ответом на который будет получение указанной информации.


Далее, во вкладеке «Договора» используется базовый запрос billingList(userphone), на вход которого поступает номер телефона клиента, на выходе массив объектов из договора клиента. Примеры данных и их типы ниже в коментарии:

def billingList(userphone):
    uids = uidFrom(userphone)
    billingList = []
    for uid in uids:
        row = {}
        row['login'] = '00101'  # Строковое значение логина договора
        row['address'] = 'г. Москва, ул. Тверская, д 1 кв. 1'  # Строковое значение логина договора
        row['internet'] = 100.0   # Флоат, стоимость продление услуги Интернета, 0.0 если нет
        row['internetdata'] = '2025-11-12'   # Строковое значение даты окончания услуги Инт, '' если нет
        row['tv'] = 0.0   # Флоат, стоимость продление услуги ТВ, 0.0 если нет
        row['tvdata'] = '' # Строковое значение даты окончания услуги ТВ, '' если нет
        row['phone'] = 0.0   # Флоат, стоимость продление услуги телефона, 0.0 если нет
        row['phonedata'] = '' # Строковое значение даты окончания услуги телефона, '' если нет
        row['cams'] = 100.0   # Флоат, стоимость продление услуги камеры+домофон, 0.0 если нет
        row['camsdata'] = '2025-11-12'   # Строковое значение даты окончания услуги камеры+домофон, '' если нет
        row['camsname'] = 'Умное пространство'  # Строковое значение названия услуги камеры+домофон, '' если нет
        row['balans'] = 50.0 # Флоат, текущиий баланс, 0.0 если нет
        row['payment'] = 500.0 # Флоат, рекомендованный платеж, 0.0 если нет
        row['invoice'] = True # Bool, разрешено ли показывать кнопку «Счета»
        row['detail'] = True # Bool, разрешено ли показывать кнопку «Детализация»
        row['receipt'] = True # Bool, разрешено ли показывать кнопку «Получить акт»
        billingList.append(row)
    return billingList 



Для управления системой из внешних программ (Billing, CRM) существует rest api с POST запросами.

Используется url '/bill/api/..', который фильтруется в nginx.conf от запросов с внешнего мира.

Методы управления устройствами:

/bill/api/devices_list/ на входе пусто, на выходе json с массивом "devices": [{'device_id':123, 'device_type':'cam', 'url':'vd.sait.ru', 'stream':'rtsp://ip:port/url', 'is_active':True, 'title':'Дверь в подьезд', 'address':'г. Москва, .....', 'longitude':45.12345678, 'latitude':47.12345678, 'record_days':10, 'domophoneid':1, 'sippassword':'Passwd', 'dtmf':1, 'camshot':'url camshot', 'paneltype':1, 'panelip':'192.168.1.1', 'panellogin':'Login', 'panelpasswd':'passwd'}, ]

/bill/api/devices_add/ на входе json нового девайса {'device_uuid':'8ee703fe-5e92-4f6e-a6bb-e194a8825be4', 'device_type':1, 'url':'vd.sait.ru', 'stream':'rtsp://ip:port/url', 'is_active':True, 'title':'Дверь в подьезд', 'address':'г. Москва, .....', 'longitude':45.12345678, 'latitude':47.12345678, 'record_days':10, 'domophoneid':1, 'sippassword':'Passwd', 'dtmf':1, 'camshot':'url camshot', 'paneltype':1, 'panelip':'192.168.1.1', 'panellogin':'Login', 'panelpasswd':'passwd'}, на выходе ""

/bill/api/devices_mod/ на входе json обновляемого девайса {'device_id':123, 'device_type':1, 'url':'vd.sait.ru', 'stream':'rtsp://ip:port/url', 'is_active':True, 'title':'Дверь в подьезд', 'address':'г. Москва, .....', 'longitude':45.12345678, 'latitude':47.12345678, 'record_days':10, 'domophoneid':1, 'sippassword':'Passwd', 'dtmf':1, 'camshot':'url camshot', 'paneltype':1, 'panelip':'192.168.1.1', 'panellogin':'Login', 'panelpasswd':'passwd'}, на выходе ""


/bill/api/devices_del/ на вход получает device_id удаляемого устройства в формате json - {'device_id':1}, на выходе ""

Примечания по полям:

device_id - числовое значение, задается автоматически при создании.

device_uuid - uuid устройства, уникальное значение, которое потом используется после url медиасервера для поиска онлайн и записей (указывается только для камер и домофонов!)

device_type - при создании числовое значение, при просмотре текст: 1 = cam, 2 = mewcam, 3 = lock (точка проходаб замок)

url - урл медиасервера, где хранятся записи и онлайн (указывается только для камер и домофонов!)

stream - урл rtsp, с логином и паролем для получения потока (указывается только для камер и домофонов!)

is_active - активно устройство или нет - True

title - строковое описание

address - строка адреса 

longitude - координаты (указывается только для камер и домофонов!)

latitude - координаты (указывается только для камер и домофонов!)

record_days - глубина архива в днях, 0 - если нет архива (указывается только для камер и домофонов!)

domophoneid - id домофона, уникальное значение, он же сиплогин, например, если сиплогин 100001, то id указывается 1  (указывается только для домофона!)

sippassword - сипароль  (указывается только для домофона!)

dtmf - код открытия дтмф  (указывается только для домофона!)

camshot - полный урл, с логином и паролем, по которому воможно получение стопкадра (указывается только для камер и домофонов!)

paneltype - тип домофона, 1 - Бевард, 2 - Сокол (указывается только для домофона!)

panelip - ip адрес домофона (указывается только для домофона!)

panellogin   логин домофона (указывается только для домофона!)

panelpasswd   пароль домофона (указывается только для домофона!)

Особые указания: 
1. сложные и/или составные устройства указываются и как камера и как замок. Таким образом, можно использовать как домофоны, так и самим комбинировать точку прохода/проезда (замки, ворота или шлагбаумы с камерой).
2. Неиспользуемые переменные указываются в запросах как 'None'


/bill/api/doors_list/ на входе пусто, на выходе json с массивом "doors": [{"id": 2, "device_id": 2, "cam": 1, "entrance": 1, "icon": "entrance", "name": "Главная дверь", "open": "http://root:Passwd@10.231.254.166:8080/relay/1/open", "open_trait": "PUT"}, ]
Примечания по полям:
id - Порядковый идентификатор двери, назначается автоматически
device_id - Идентификатор замка в Devices, равен device_id там и связанн с ним, при этом device_type в devices у этого устройства обязательно = 3
cam - Идентификатор камеры в Devices, равен device_id там и связанн с ним, при этом device_type в devices у этого устройства обязательно = 1|2
entrance - номер подъезда
icon - Название иконки для этой двери в приложении, может быть "entrance", "wicket", "gate"
name - Название двери
open - Полная команда для открытия, например "http://root:Passwd@10.231.254.166:8080/relay/1/open"
open_trait - Тип команды для открытия, например "PUT", если не указанно, то "GET"


/bill/api/doors_add/ на входе json нового девайса {"device_id": 2, "cam": 1, "entrance": 1, "icon": "entrance", "name": "Главная дверь", "open": "http://root:Passwd@10.231.254.166:8080/relay/1/open", "open_trait": "PUT"}, на выходе ""

/bill/api/doors_mod/ на входе json обновляемого девайса {'doors_id':1, "device_id": 2, "cam": 1, "entrance": 1, "icon": "entrance", "name": "Главная дверь", "open": "http://root:Passwd@10.231.254.166:8080/relay/1/open", "open_trait": "PUT"}, на выходе ""


/bill/api/doors_del/ на вход получает id удаляемого устройства в формате json - {'doors_id':1}, на выходе ""


Методы управления правами на устройства:

/bill/api/rights_list/ на вход получает uid абонента в формате json - {'uid':12345}, на выходе выдает массив [{'device_id':1 ,'device_type':'cam' , 'title': 'Камера на входе']

/bill/api/rights_add/  на вход получает uid абонента и id добавляемого в права устройства в формате json - {'uid':12345', 'device_id':1}, на выходе ""

/bill/api/rights_del/  на вход получает uid абонента и id удаляемого из прав устройства в формате json - {'uid':12345', 'device_id':1}, на выходе ""






